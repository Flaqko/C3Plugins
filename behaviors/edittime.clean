function GetBehaviorSettings()
{
return {
"name":			"Pin offsetXY",
"id":			"Rex_pinOffsetXY",
"description":	"Stick to another object maintaining a relative offsetXY.",
"author":		"Rex.Rainbow",
"help url":		"https://rexrainbow.github.io/C2RexDoc/c2rexpluginsACE/behavior_rex_pinxyoffset.html",
"category":		"Rex - Movement - pin",
"flags":		bf_onlyone
};
};
AddCondition(0, cf_none, "Is pinned", "", "{my} is pinned", "Object is currently pinned to another object.", "IsPinned");
AddObjectParam("Pin to", "Choose the object to pin to.");
AddNumberParam("Offset x", "Offset x in pixel", 0);
AddNumberParam("Offset y", "Offset y in pixel", 0);
AddAction(0, af_none, "Pin to object with offset", "Pin",
"{my} Pin to {0} with offset (<i>{1}</i>, <i>{2}</i>)",
"Pin the object to another object with offset.", "Pin");
AddObjectParam("Pin to", "Choose the object to pin to.");
AddAction(1, af_none, "Pin to object", "Pin",
"{my} Pin to {0}",
"Pin the object to another object with current offset.", "Pin");
AddAction(10, af_none, "Unpin", "Unpin", "{my} Unpin", "Unpin the object.", "Unpin");
AddExpression(0, ef_return_number, "", "", "PinnedUID", "Get the UID of the object pinned to, or -1 if not pinned.");
ACESDone();
var property_list = [
];
function CreateIDEBehaviorType()
{
return new IDEBehaviorType();
}
function IDEBehaviorType()
{
assert2(this instanceof arguments.callee, "Constructor called as a function");
}
IDEBehaviorType.prototype.CreateInstance = function(instance)
{
return new IDEInstance(instance, this);
}
function IDEInstance(instance, type)
{
assert2(this instanceof arguments.callee, "Constructor called as a function");
this.instance = instance;
this.type = type;
this.properties = {};
for (var i = 0; i < property_list.length; i++)
this.properties[property_list[i].name] = property_list[i].initial_value;
}
IDEInstance.prototype.OnCreate = function()
{
}
IDEInstance.prototype.OnPropertyChanged = function(property_name)
{
}
